#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo -e "\033[0;Backend Project TS! ðŸš€\033[0m"
echo -e "\033[0;34mValidating changes... \033[0m"

## Analitics files
echo -e "\033[0;32mExecuting analitics files âœ…\033[0m"
filesString=$(git diff --name-only --cached)

files=(`echo $filesString | tr ' ' ' '`)
filterFiles=()

for file in "${files[@]}"
do
  nameFolderAndSlash=$(echo "$file" | awk -F '/' '{print "/"$2}')
  nameFolder=$(echo "$nameFolderAndSlash" | sed 's/\///g')
  fileExists=false

  for filterFile in "${filterFiles[@]}"
  do
    if [ "$filterFile" == "$nameFolder" ]
    then
      fileExists=true
    fi
  done

  if echo "$file" | grep -q "src/" && [ "$fileExists" = false ]; then
    filterFiles+=("$nameFolder");
  fi
done
## End analitics files

## Commit msg
echo -e "\033[0;32mEvaluating conventional commit âœ…\033[0m"
yarn commitlint --edit $1
## End commit msg

lint_staged=$(yarn lint-staged)
lint_staged_result="'$lint_staged'"
staged_files='No staged files'

if [[ "$lint_staged_result" == *"$staged_files"* ]]; then
  echo -e "\033[0;32mNo changes in code âœ…\033[0m"
  exit
fi

format=$(yarn format)
format_result="'$format'"

echo -e "\033[0;32mFormat...\033[0m"
if [[ $format_result == *"Done"* ]]; then
  echo -e "\033[0;32mFormatting successfully âœ…\033[0m"
else
  echo "Formatting errors: '$format'"
fi

lint=$(yarn lint)
lint_result="'$lint'"

echo -e "\033[0;32mEslint...\033[0m"
if [[ $lint_result == *"Done"* ]]; then
  echo -e "\033[0;32mEslint successfully âœ…\033[0m"
else
  echo "Eslint errors: '$lint'"
fi

echo -e "\033[0;34mBuilding... \033[0m"
yarn build:pre-commit > /dev/null
echo -e "\033[0;32mBuild succesfully âœ…\033[0m"

## Testing files
for filterFile in "${filterFiles[@]}"
do
  folderTest="__test__/$filterFile"
  
  if [ -d "$folderTest" ]; then
    echo -e "\033[0;32mExecuting testing folder:$filterFile âœ…\033[0m"
    yarn test --testPathPattern="$folderTest"
  fi
done
## End testing files

echo -e "\033[0;32mHappy Coding ðŸŽ‰\033[0m"